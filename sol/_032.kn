func main()
	var n: int :: cui@inputInt()
	var a: [][]int :: #[n, n]int
	for i(0, n - 1)
		for j(0, n - 1)
			do a[i][j] :: cui@inputInt()
		end for
	end for
	
	var m: int :: cui@inputInt()
	var xy: [][]bool :: #[n, n]bool
	for(1, m)
		var x: int :: cui@inputInt() - 1
		var y: int :: cui@inputInt() - 1
		do xy[x][y] :: true
		do xy[y][x] :: true
	end for
	
	var idxs: []int :: #[n]int
	for i(0, n - 1)
		do idxs[i] :: i
	end for
	
	var ans: int :: lib@intMax
	
	while loop(@nextPermutation(idxs), skip)
		var t: int :: a[idxs[0]][0]
		for i(1, n - 1)
			if(xy[idxs[i]][idxs[i - 1]])
				skip loop
			end if
			do t :+ a[idxs[i]][i]
		end for
		do ans :: [ans, t].min()
	end while
	
	if(ans = lib@intMax)
		do ans :: -1
	end if
	do cui@print("\{ans}\n")
end func

func nextPermutation(arr: []int): bool
	var len: int :: ^arr
	var left: int :: len - 2
	while(left >= 0 & arr[left] >= arr[left + 1])
		do left :- 1
	end while
	if(left < 0)
		ret false
	end if
	var right: int :: len - 1
	while(arr[left] >= arr[right])
		do right :- 1
	end while
	var tmp: int :: arr[left]
	do arr[left] :: arr[right]
	do arr[right] :: tmp
	do left :+ 1
	do right :: len - 1
	while(left < right)
		do tmp :: arr[left]
		do arr[left] :: arr[right]
		do arr[right] :: tmp
		do left :+ 1
		do right :- 1
	end while
	ret true
end func
