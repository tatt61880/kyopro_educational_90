func main()
	const mod: int :: 1000000007
	var n: int :: cui@inputInt()
	var b: int :: cui@inputInt()
	var k: int :: cui@inputInt()
	
	var dp: []int :: #[b]int
	for i(0, k - 1)
		var c: int :: cui@inputInt()
		do dp[c % b] :+ 1
	end for
	
	var ans: []int :: #[b]int
	var pow10: int :: 10 % b
	do ans[0] :: 1
	while(n > 0)
		if(n % 2 = 1)
			var ansNext: []int :: #[b]int
			for i(0, b - 1)
				for j(0, b - 1)
					do ansNext[(i * pow10 + j) % b] :+ ans[i] * dp[j]
					do ansNext[(i * pow10 + j) % b] :% mod
				end for
			end for
			do ans :: ansNext
		end if
		block
			var dpNext: []int :: #[b]int
			for i(0, b - 1)
				for j(0, b - 1)
					do dpNext[(i * pow10 + j) % b] :+ dp[i] * dp[j]
					do dpNext[(i * pow10 + j) % b] :% mod
				end for
			end for
			do dp :: dpNext
		end block
		do pow10 :: (pow10 ^ 2) % b
		do n :/ 2
	end while
	do cui@print("\{ans[0]}\n")
end func
