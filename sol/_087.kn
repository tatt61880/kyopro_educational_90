func main()
	var n: int :: cui@inputInt()
	var p: int :: cui@inputInt()
	var k: int :: cui@inputInt()
	var g: []list<@Edge> :: #[n]list<@Edge>
	for i(0, n - 1)
		do g[i] :: #list<@Edge>
		for j(0, n - 1)
			var a: int :: cui@inputInt()
			if(a > 0)
				do g[i].add((#@Edge).init(j, a))
			end if
		end for
	end for
	var x1: int :: f(g, p, k)
	var x2: int :: f(g, p, k + 1)
	var ans: int :: x1 - x2
	if(x1 = p + 1 & x1 <> x2)
		do cui@print("Infinity\n")
		ret
	end if
	do cui@print("\{ans}\n")
	
	; pスヌーク以下で到達可能であるような組がkk個以上となる最大のxの値を返す。
	func f(g: []list<@Edge>, p: int, kk: int): int
		var n: int :: ^g
		var ok: int :: 0
		var ng: int :: p + 2
		while((ok - ng).abs() > 1)
			var mid: int :: (ok + ng) / 2
			var costs: [][]int :: @floydWarshall(g, mid)
			var cnt: int :: 0
			for i(0, n - 1)
				for j(i + 1, n - 1)
					if(costs[i][j] <= p)
						do cnt :+ 1
					end if
				end for
			end for
			if(cnt >= kk)
				do ok :: mid
			else
				do ng :: mid
			end if
		end while
		ret ok
	end func
end func

class Edge()
	+var to_: int
	+var cost: int
	+func init(to_: int, cost: int): Edge
		do me.to_ :: to_
		do me.cost :: cost
		ret me
	end func
end class

func floydWarshall(g: []list<@Edge>, x: int): [][]int
	var n: int :: ^g
	var res: [][]int :: ##[[x].repeat(n)].repeat(n)
	for i(0, n - 1)
		do g[i].head()
		for(0, ^g[i] - 1)
			var e: @Edge :: g[i].get()
			var j: int :: e.to_
			do res[i][j] :: e.cost
			do g[i].next()
		end for
	end for
	for k(0, n - 1)
		for i(0, n - 1)
			if(res[i][k] = lib@intMax)
				skip i
			end if
			for j(0, n - 1)
				if(res[k][j] = lib@intMax)
					skip i
				end if
				do res[i][j] :: lib@min(res[i][j], res[i][k] + res[k][j])
			end for
		end for
	end for
	ret res
end func
