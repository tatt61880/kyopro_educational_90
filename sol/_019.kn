func main()
	var n: int :: cui@inputInt()
	var a: []int :: #[2 * n]int
	for i(0, 2 * n - 1)
		do a[i] :: cui@inputInt()
	end for
	
	; 区間DP
	; dp[l][r] = l以上r以下の区間の取り除きコストの最小値
	var dp: [][]int :: #[2 * n, 2 * n]int
	for l(0, 2 * n - 1)
		for r(0, 2 * n - 1)
			do dp[l][r] :: 10 ^ 9
		end for
	end for
	
	for w(2, 2 * n, 2)
		for l(0, 2 * n - w)
			var r: int :: l + w - 1
			if(w = 2)
				do dp[l][r] :: (a[l] - a[r]).abs()
			else
				for k(l + 1, r - 2)
					do dp[l][r] :: [dp[l][r], dp[l][k] + dp[k + 1][r]].min()
				end for
				do dp[l][r] :: [dp[l][r], dp[l + 1][r - 1] + (a[l] - a[r]).abs()].min()
			end if
		end for
	end for
	
	var ans: int :: dp[0][2 * n - 1]
	do cui@print("\{ans}\n")
end func
