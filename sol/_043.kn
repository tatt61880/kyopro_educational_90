func main()
	var h: int :: cui@inputInt()
	var w: int :: cui@inputInt()
	var rs: int :: cui@inputInt() - 1
	var cs: int :: cui@inputInt() - 1
	var rt: int :: cui@inputInt() - 1
	var ct: int :: cui@inputInt() - 1
	
	var s: [][]char :: #[h][]char
	for y(0, h - 1)
		do s[y] :: cui@input()
	end for
	
	var dx: []int :: [1, 0, -1, 0]
	var dy: []int :: [0, 1, 0, -1]
	var qn: queue<int> :: #queue<int>
	
	const infinity: int :: lib@intMax
	var v: [][][]int :: #[h, w, 2]int
	for y(0, h - 1)
		for x(0, w - 1)
			do v[y][x][0] :: infinity
			do v[y][x][1] :: infinity
		end for
	end for
	do v[rs][cs][0] :: 0
	do v[rs][cs][1] :: 0
	for i(0, 3)
		do qn.add((rs * w + cs) * 4 + i)
	end for
	
	var cnt: int :: 0
	while(^qn <> 0)
		var q: queue<int> :: ##qn
		do qn :: #queue<int>
		while(^q <> 0)
			var val: int :: q.get()
			var pos: int :: val / 4
			var y: int :: pos / w
			var x: int :: pos % w
			var dir: int :: val % 4
			while loop(true)
				do v[y][x][dir % 2] :: [v[y][x][dir % 2], cnt].min()
				if(v[y][x][1 - dir % 2] = infinity)
					do qn.add((y * w + x) * 4 + (dir + 1) % 4)
					do qn.add((y * w + x) * 4 + (dir + 3) % 4)
				end if
				do y :+ dy[dir]
				do x :+ dx[dir]
				if(x = -1 | x = w)
					break loop
				end if
				if(y = -1 | y = h)
					break loop
				end if
				if(s[y][x] = '#')
					break loop
				end if
				if(v[y][x][dir % 2] <= cnt)
					break loop
				end if
			end while
		end while
		do cnt :+ 1
	end while
	
	var ans: int :: v[rt][ct].min()
	do cui@print("\{ans}\n")
end func
