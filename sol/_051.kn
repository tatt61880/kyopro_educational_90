func main()
	var n: int :: cui@inputInt()
	var k: int :: cui@inputInt()
	var p: int :: cui@inputInt()
	var a: []int :: #[n]int
	for i(0, n - 1)
		do a[i] :: cui@inputInt()
	end for
	
	var m: int :: n / 2
	var x: []list<int> :: #[k + 1]list<int>
	for i(0, k)
		do x[i] :: #list<int>
	end for
	for id(0, 2 ^ m - 1)
		var _: int :: id
		var f: []bool :: #[m]bool
		for i(0, m - 1)
			do f[i] :: _ % 2 = 1
			do _ :/ 2
		end for
		var sum: int :: 0
		var cnt: int :: 0
		for i(0, m - 1)
			if(f[i])
				do cnt :+ 1
				do sum :+ a[i]
			end if
		end for
		if(cnt <= k)
			do x[cnt].add(sum)
		end if
	end for
	var y: [][]int :: #[k + 1][]int
	for i(0, k)
		do y[i] :: #[^x[i]]int
		do x[i].head()
		for j(0, ^x[i] - 1)
			do y[i][j] :: x[i].get()
			do x[i].next()
		end for
		do y[i].sort()
	end for
	
	var ans: int :: 0
	for id(0, 2 ^ (n - m) - 1)
		var _: int :: id
		var f: []bool :: #[n - m]bool
		for i(0, n - m - 1)
			do f[i] :: _ % 2 = 1
			do _ :/ 2
		end for
		var sum: int :: 0
		var cnt: int :: 0
		for i(0, n - m - 1)
			if(f[i])
				do cnt :+ 1
				do sum :+ a[m + i]
			end if
		end for
		if(cnt <= k)
			var ok: int :: -1
			var ng: int :: ^y[k - cnt]
			while((ok - ng).abs() > 1)
				var mid: int :: (ok + ng) / 2
				if(sum + y[k - cnt][mid] <= p)
					do ok :: mid
				else
					do ng :: mid
				end if
			end while
			do ans :+ ok + 1
		end if
	end for
	
	do cui@print("\{ans}\n")
end func
